#!/bin/env python3
#
# Geometry generator procedures for creating input files
# for FasterCap from a foundry metal and dielectric
# stackup description.
#
# Routines in this file:
#
# generate_one_wire_file(filename, conductor, metal, width, pstack)
# generate_1wire_2plane_file(filename, substrate, conductor, metal, width, pstack)
# generate_one_shielded_wire_file(filename, substrate, conductor, metal, width, spacing, pstack)*
# generate_two_wire_file(filename, conductor, metal, width, spacing, pstack)
# generate_two_offset_wire_file(filename, substrate, conductor, cwidth, metal, mwidth, spacing, pstack)
#
# *The routine generate_two_offset_wire_file() is essentially a more general form of
# generate_one_shielded_wire_file().
#
# To do: Make general case of generate_two_wire_file() that allows the width of each
# wire to be specified independently.

# --------------------------------------------------------
# generate_one_wire_file --
#
# Procedure to write a ".lst" file for fastercap for a
# geometry of one wire over substrate.
#
# This generates a simple geometry file representing the cross-
# section of one wire of a given width, centered at X=0.  Units
# are dimensionless in fastercap but assumed to be microns.
#
# Arguments:
# (1) filename of the output file
# (2) name of conductor layer (substrate/well/diffusion)
# (3) metal layer for wire
# (4) width of metal wire
# (5) process stack generated by ordered_stack()
# --------------------------------------------------------

def generate_one_wire_file(filename, conductor, metal, width, pstack):

    # Calculate wire half-width
    halfwidth = width / 2.0

    # Calculate wire base and wire center---use the latter as reference points
    # for conformal dielectrics.
    wheight = 0
    wbase = 0
    wcy = 0
    for index in range(0, len(pstack) - 1):
        layer = pstack[index]
        if layer[1] == 'm':
            wheight = layer[4] - layer[3]
            wbase = layer[3]
            wcy = wbase + (wheight / 2)
            break

    extra = []

    swidth = "{:.2f}".format(width)

    with open(filename, 'w') as ofile:
        print('* 2D - ' + metal + ' to ' + conductor, file=ofile)
        print('* FasterCap input file: ' + filename, file=ofile)
        print('* Instantiates one ' + metal + ' wire of width ' + swidth, file=ofile)
        print('*', file=ofile)
        print('*', file=ofile)

        # Describe the stack.  ordered_stack() generates a stack list of layers
        # from top to bottom.  Ignore the first entry (air) because each layer
        # references the dielectric of the layer above it.

        for index in range(1, len(pstack)):
            layer = pstack[index]
            layer_above = pstack[index - 1]

            refmetal = layer[2]

            if layer[1] == 'm':
                if layer[0] == metal:
                    layer_below = pstack[index + 1]

                    # Add coupling from dielectric below to dielectric above
                    # The dielectric above is either a plain 'k' dielectric
                    # or a conformal dielectric with a non-zero thickness over
                    # the whole area (see dheight, below).
                    dielectric_above = None
                    sidewall_dielectric = None
                    top_dielectric = None
                    for j in range(index - 1, -1, -1):
                        if pstack[j][1] == 's':
                            sidewall_dielectric = pstack[j]
                        if pstack[j][1] == 'k':
                            dielectric_above = pstack[j]
                            break
                        else:
                            if pstack[j][1] == 'c' and pstack[j][4] > pstack[j][3]:
                                dielectric_above = pstack[j]
                                break
                            if pstack[j][1] == 'c' and pstack[j][5] > pstack[j][4]:
                                top_dielectric = pstack[j]
                                break

                    if dielectric_above and layer_below[7] != dielectric_above[7]:
                        # Simple dielectric boundary spanning the width of the simulated space

                        kabove = "{:.2f}".format(dielectric_above[7])
                        kvalue = "{:.2f}".format(layer_below[7])
                        yvalue = "{:.4f}".format(layer_below[4])
                        yvalref = "{:.4f}".format(layer_below[4] + 1.0)

                        print('* ' + layer_below[0] + ' to ' + dielectric_above[0], file=ofile)
                        print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)
                    elif top_dielectric:
                        kabove = "{:.2f}".format(top_dielectric[7])
                    else:
                        kabove = "{:.2f}".format(layer_above[7])

                    if sidewall_dielectric:
                        kside = "{:.2f}".format(sidewall_dielectric[7])
                    else:
                        kside = kabove

                    # Describe metal wire
                    ybase = "{:.4f}".format(layer_below[4])
                    kbelow = "{:.2f}".format(layer_below[7])

                    print('* Metal ' + metal + ' wire', file=ofile)

                    print('C ' + metal + '_left  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_top  ' + kabove + '  0.0  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_right  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_bot  ' + kbelow + '  0.0  ' + ybase, file=ofile)

            elif layer[1] == 'k' and layer_above[1] == 'k' and (layer[5] != layer_above[5]):
                # Simple dielectric boundary spanning the width of the simulated space

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])
                yvalue = "{:.4f}".format(layer[4])
                yvalref = "{:.4f}".format(layer[4] + 1.0)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)

            elif layer[1] == 'd':
                # Describe ground plane conductor.

                kabove = "{:.2f}".format(layer_above[7])
                yvalue = "{:.4f}".format(layer[4])

                print('* ' + layer[0] + ' (reference plane)', file=ofile)
                print('C ' + layer[0] + '_plane ' + kabove + '  0.0  ' + yvalue, file=ofile)

            elif layer[1] == 's':
                # Sidewall dielectric around metal only

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                wcyspec = "{:.4f}".format(wcy)

                wirey = wbase
                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_sidewall_' + layer[0] + '_left ' + kvalue + ' ' + kabove + ' 0.0 ' + wyspec + ' 0.0 ' + wcyspec, file=ofile)
                print('D k_sidewall_' + layer[0] + '_right ' + kvalue + ' ' + kabove + ' 0.0 ' + wyspec + ' 0.0 ' + wcyspec, file=ofile)

                wirex1 = halfwidth
                wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)
                wyspec = "{:.4f}".format(wheight)

                # Add new entries for the conformal dielectric segments
                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_left')
                extra.append('*')
                extra.append('S conform ' + wxn2spec + ' 0.0 ' +  wxn2spec + ' ' + wyspec)
                extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wxn1spec + ' ' + wyspec)
                extra.append('End')

                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_right')
                extra.append('*')
                extra.append('S conform ' + wx2spec + ' 0.0 ' +  wx2spec + ' ' + wyspec)
                extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx1spec + ' ' + wyspec)
                extra.append('End')

            elif layer[1] == 'c':
                # Conformal dielectric

                layer_below = pstack[index + 1]

                # If dheight > 0 then the dielectric exists over the whole
                # plane.
                dheight = layer[4] - layer[3]
                if dheight < 0:
                    dheight = 0

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                wirey = wbase
                if dheight > 0:
                    # Choose reference Y value that is below the metal
                    wcyspec = "{:.4f}".format(wirey - 1.0)
                    wtext = '_wire '
                    dtext = ' -'
                else:
                    wcyspec = "{:.4f}".format(wcy)
                    wtext = ' '
                    dtext = ''

                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_conformal_' + layer[0] + wtext + kvalue + ' ' + kabove + ' 0.0 ' + wyspec + ' 0.0 ' + wcyspec + dtext, file=ofile)

                # If layer_below is a sidewall dielectric, then add its
                # width.  If it is a metal, then the value will be zero
                wirex1 = halfwidth + layer_below[6]
                wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)

                wirey = layer[5] - wbase
                wyspec = "{:.4f}".format(wirey)
                dspec = "{:.4f}".format(dheight)

                # Add new entry for the conformal dielectric segments
                extra.append('')
                if dheight > 0:
                    extra.append('File k_conformal_' + layer[0] + '_wire')
                    extra.append('S conform ' + ' -40.0 ' + dspec + ' ' + wxn2spec + ' ' + dspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                    extra.append('S conform ' + wx2spec + ' ' + dspec + ' 40.0 ' + dspec)
                else:
                    extra.append('File k_conformal_' + layer[0])
                    extra.append('*')
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                extra.append('End')

        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_plane', file=ofile)
        print('0 ground plane', file=ofile)
        print('*', file=ofile)
        print('S ground -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File k_boundary', file=ofile)
        print('0 dielectric boundary', file=ofile)
        print('*', file=ofile)
        print('S plane -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        # Wire geometry
        print('', file=ofile)
        print('File ' + metal + '_left', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide left', file=ofile)
        print('*', file=ofile)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthn + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_top', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide top', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' ' + height + ' ' + hwidthp + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_right', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide right', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthp + ' ' + height + ' ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('', file=ofile)
        print('File ' + metal + '_bot', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide bottom', file=ofile)
        print('*', file=ofile)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        for line in extra:
            print(line, file=ofile)

# --------------------------------------------------------
# generate_1wire_2plane_file --
#
# Procedure to write a ".lst" file for fastercap for a
# geometry of two wires on different planes, where the
# topmost wire is wide enough to be considered a
# conductor plane.
#
# This generates a simple geometry file representing the cross-
# section of one wire of a given width, centered at X=0, with
# conductor planes above (representing another metal) and below
# (representing substrate or diffusion).
# Units are dimensionless in fastercap but assumed to be microns.
#
# Arguments:
# (1) filename of the output file
# (2) name of substrate layer (substrate/well/diffusion)
# (2) name of conductor above (metal)
# (3) metal layer for wire
# (4) width of metal wire
# (5) process stack generated by ordered_stack()
# --------------------------------------------------------

def generate_1wire_2plane_file(filename, substrate, conductor, metal, width, pstack):

    # Calculate wire half-width
    halfwidth = width / 2.0

    # Calculate wire base and wire center---use the latter as reference points
    # for conformal dielectrics.
    wheight = 0
    wbase = 0
    wcy = 0
    for index in range(0, len(pstack) - 1):
        layer = pstack[index]
        if layer[1] == 'm':
            if layer[0] == metal:
                wheight = layer[4] - layer[3]
                wbase = layer[3]
                wcy = wbase + (wheight / 2)
                break

    extra = []

    swidth = "{:.2f}".format(width)

    with open(filename, 'w') as ofile:
        print('* 2D - ' + metal + ' to ' + conductor, file=ofile)
        print('* FasterCap input file: ' + filename, file=ofile)
        print('* Instantiates one ' + metal + ' wire of width ' + swidth, file=ofile)
        print('*', file=ofile)
        print('*', file=ofile)

        # Find the top metal layer and remember its index
        for index in range(1, len(pstack)):
            layer = pstack[index]
            layer_below = pstack[index + 1]
            if layer[1] == 'm':
                if layer[0] == conductor:
                    yidx = index
                    kbelow = "{:.2f}".format(layer_below[7])
                    yvalue = "{:.4f}".format(layer_below[4])
                    break

        # Output the top metal as a conductor plane.
        print('* ' + layer[0] + ' (metal plane above)', file=ofile)
        print('C ' + conductor + '_plane ' + kbelow + '  0.0  ' + yvalue, file=ofile)

        # Describe the stack.  ordered_2metal_stack() generates a stack list of
        # layers from top to bottom.  Ignore the first entry (air) because each
        # layerreferences the dielectric of the layer above it.

        for index in range(yidx + 1, len(pstack)):
            layer = pstack[index]
            layer_above = pstack[index - 1]

            refmetal = layer[2]

            if layer[1] == 'm':
                if layer[0] == metal:
                    layer_below = pstack[index + 1]

                    # Add coupling from dielectric below to dielectric above
                    # The dielectric above is either a plain 'k' dielectric
                    # or a conformal dielectric with a non-zero thickness over
                    # the whole area (see dheight, below).
                    dielectric_above = None
                    sidewall_dielectric = None
                    top_dielectric = None
                    for j in range(index - 1, -1, -1):
                        if pstack[j][1] == 's':
                            sidewall_dielectric = pstack[j]
                        if pstack[j][1] == 'k':
                            dielectric_above = pstack[j]
                            break
                        else:
                            if pstack[j][1] == 'c' and pstack[j][4] > pstack[j][3]:
                                dielectric_above = pstack[j]
                            if pstack[j][1] == 'c' and pstack[j][5] > pstack[j][4]:
                                top_dielectric = pstack[j]
                            break
                    if dielectric_above and layer_below[7] != dielectric_above[7]:
                        # Simple dielectric boundary spanning the width of the simulated space

                        kabove = "{:.2f}".format(dielectric_above[7])
                        kvalue = "{:.2f}".format(layer_below[7])
                        yvalue = "{:.4f}".format(layer_below[4])
                        yvalref = "{:.4f}".format(layer_below[4] + 1.0)

                        print('* ' + layer_below[0] + ' to ' + dielectric_above[0], file=ofile)
                        print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)
                    elif top_dielectric:
                        kabove = "{:.2f}".format(top_dielectric[7])
                    else:
                        kabove = "{:.2f}".format(layer_above[7])

                    if sidewall_dielectric:
                        kside = "{:.2f}".format(sidewall_dielectric[7])
                    else:
                        kside = kabove

                    # Describe metal wire
                    ybase = "{:.4f}".format(layer_below[4])
                    kbelow = "{:.2f}".format(layer_below[7])

                    print('* Metal ' + metal + ' wire', file=ofile)

                    print('C ' + metal + '_left  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_top  ' + kabove + '  0.0  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_right  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_bot  ' + kbelow + '  0.0  ' + ybase, file=ofile)

            elif layer[1] == 'k' and layer_above[1] == 'k' and (layer[7] != layer_above[7]):
                # Simple dielectric boundary spanning the width of the simulated space

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])
                yvalue = "{:.4f}".format(layer[4])
                yvalref = "{:.4f}".format(layer[4] + 1.0)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)

            elif layer[1] == 'd':
                # Describe ground plane conductor.

                kabove = "{:.2f}".format(layer_above[7])
                yvalue = "{:.4f}".format(layer[4])

                print('* ' + layer[0] + ' (reference plane)', file=ofile)
                print('C ' + layer[0] + '_plane ' + kabove + '  0.0  ' + yvalue, file=ofile)

            elif layer[1] == 's':
                # Sidewall dielectric around metal only

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                wcyspec = "{:.4f}".format(wcy)

                wirey = wbase
                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_sidewall_' + layer[0] + '_left ' + kvalue + ' ' + kabove + ' 0.0 ' + wyspec + ' 0.0 ' + wcyspec, file=ofile)
                print('D k_sidewall_' + layer[0] + '_right ' + kvalue + ' ' + kabove + ' 0.0 ' + wyspec + ' 0.0 ' + wcyspec, file=ofile)

                wirex1 = halfwidth
                wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)
                wyspec = "{:.4f}".format(wheight)

                # Add new entries for the conformal dielectric segments
                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_left')
                extra.append('*')
                extra.append('S conform ' + wxn2spec + ' 0.0 ' +  wxn2spec + ' ' + wyspec)
                extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wxn1spec + ' ' + wyspec)
                extra.append('End')

                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_right')
                extra.append('*')
                extra.append('S conform ' + wx2spec + ' 0.0 ' +  wx2spec + ' ' + wyspec)
                extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx1spec + ' ' +
 wyspec)
                extra.append('End')


            elif layer[1] == 'c':
                # Conformal dielectric

                layer_below = pstack[index + 1]

                # If dheight > 0 then the dielectric exists over the whole
                # plane.
                dheight = layer[4] - layer[3]
                if dheight < 0:
                    dheight = 0

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                wirey = wbase
                if dheight > 0:
                    # Choose reference Y value that is below the metal
                    wcyspec = "{:.4f}".format(wirey - 1.0)
                    wtext = '_wire '
                    dtext = ' -'
                else:
                    wcyspec = "{:.4f}".format(wcy)
                    wtext = ' '
                    dtext = ''

                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_conformal_' + layer[0] + wtext + kvalue + ' ' + kabove + ' 0.0 ' + wyspec + ' 0.0 ' + wcyspec + dtext, file=ofile)

                # If layer_below is a sidewall dielectric, then add its
                # width.  If it is a metal, then the value will be zero
                wirex1 = halfwidth + layer_below[6]
                wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)

                wirey = layer[5] - wbase
                wyspec = "{:.4f}".format(wirey)
                dspec = "{:.4f}".format(dheight)

                # Add new entry for the conformal dielectric segments
                extra.append('')
                if dheight > 0:
                    extra.append('File k_conformal_' + layer[0] + '_wire')
                    extra.append('S conform ' + ' -40.0 ' + dspec + ' ' + wxn2spec + ' ' + dspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                    extra.append('S conform ' + wx2spec + ' ' + dspec + ' 40.0 ' + dspec)
                else:
                    extra.append('File k_conformal_' + layer[0])
                    extra.append('*')
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                extra.append('End')

        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_plane', file=ofile)
        print('0 conductor plane', file=ofile)
        print('*', file=ofile)
        print('S conductor -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + substrate + '_plane', file=ofile)
        print('0 ground plane', file=ofile)
        print('*', file=ofile)
        print('S ground -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File k_boundary', file=ofile)
        print('0 dielectric boundary', file=ofile)
        print('*', file=ofile)
        print('S plane -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        # Wire geometry
        print('', file=ofile)
        print('File ' + metal + '_left', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide left', file=ofile)
        print('*', file=ofile)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthn + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_top', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide top', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' ' + height + ' ' + hwidthp + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_right', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide right', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthp + ' ' + height + ' ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_bot', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide bottom', file=ofile)
        print('*', file=ofile)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        for line in extra:
            print(line, file=ofile)

# --------------------------------------------------------
# generate_one_shielded_wire_file --
#
# Procedure to write a ".lst" file for fastercap for a
# geometry of two wires in different planes, where one
# of the wires is considered a shield and extends all
# the way to the left side of the simulation area.
#
# This generates a simple geometry file representing the cross-
# section of two wires, one with a given width and centered at
# zero, and the other with a given separation representing the
# distance from X=0 to the wire edge, with the other wire edge
# placed at the simulation left boundary.
# Units are dimensionless in fastercap but assumed to be microns.
#
# Arguments:
# (1) filename of the output file
# (2) name of substrate layer (substrate/well/diffusion)
# (3) metal (shield) layer being coupled to
# (4) metal layer for wire
# (5) width of metal wire
# (6) spacing from wire center to edge of shield
# (7) process stack generated by ordered_2metal_stack()
# --------------------------------------------------------

def generate_one_shielded_wire_file(filename, substrate, conductor, metal, width, spacing, pstack):

    # Calculate wire half-width.  Wire center X position for this wire will be zero
    halfwidth = width / 2.0

    # Calculate wire half-width of the shield wire
    shwidth = (40 - spacing)
    shhalfwidth = shwidth / 2.0
    # Calculate the wire center X position of the shield wire
    wcx = -40 + shhalfwidth

    # Calculate wire bases (Y position)
    wheight = sheight = 0
    wbase = sbase = 0
    wcy = scy = 0
    for index in range(0, len(pstack) - 1):
        layer = pstack[index]
        if layer[1] == 'm':
            if layer[0] == metal:
                wheight = layer[4] - layer[3]
                wbase = layer[3]
                wcy = wbase + (wheight / 2)
            elif layer[0] == conductor:
                sheight = layer[4] - layer[3]
                sbase = layer[3]
                scy = sbase + (sheight / 2)

    extra = []

    swidth = "{:.2f}".format(width)
    sspace = "{:.2f}".format(spacing)
    sshwidth = "{:.2f}".format(shwidth)

    with open(filename, 'w') as ofile:
        print('* 2D - ' + metal + ' to ' + conductor + ' over ' + substrate, file=ofile)
        print('* FasterCap input file: ' + filename, file=ofile)
        print('* Instantiates a ' + metal + ' wire of width ' + swidth, file=ofile)
        print('* Wire center to shield edge is ' + sspace, file=ofile)
        print('*', file=ofile)
        print('*', file=ofile)

        # Describe the stack.  ordered_2metal_stack() generates a stack list of layers
        # from top to bottom.  Ignore the first entry (air) because each layer
        # references the dielectric of the layer above it.

        for index in range(1, len(pstack)):
            layer = pstack[index]
            layer_above = pstack[index - 1]

            refmetal = layer[2]

            if layer[1] == 'm':
                if layer[0] == metal or layer[0] == conductor:
                    layer_below = pstack[index + 1]

                    # Add coupling from dielectric below to dielectric above
                    # The dielectric above is either a plain 'k' dielectric
                    # or a conformal dielectric with a non-zero thickness over
                    # the whole area (see dheight, below).
                    dielectric_above = None
                    sidewall_dielectric = None
                    top_dielectric = None
                    for j in range(index - 1, -1, -1):
                        if pstack[j][1] == 's':
                            sidewall_dielectric = pstack[j]
                        if pstack[j][1] == 'k':
                            dielectric_above = pstack[j]
                            break
                        else:
                            if pstack[j][1] == 'c' and pstack[j][4] > pstack[j][3]:
                                dielectric_above = pstack[j]
                            if pstack[j][1] == 'c' and pstack[j][5] > pstack[j][4]:
                                top_dielectric = pstack[j]
                            break
                    if dielectric_above and layer_below[7] != dielectric_above[7]:
                        # Simple dielectric boundary spanning the width of the simulated space

                        kabove = "{:.2f}".format(dielectric_above[7])
                        kvalue = "{:.2f}".format(layer_below[7])
                        yvalue = "{:.4f}".format(layer_below[4])
                        yvalref = "{:.4f}".format(layer_below[4] + 1.0)

                        print('* ' + layer_below[0] + ' to ' + dielectric_above[0], file=ofile)
                        print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)
                    elif top_dielectric:
                        kabove = "{:.2f}".format(top_dielectric[7])
                    else:
                        kabove = "{:.2f}".format(layer_above[7])

                    if sidewall_dielectric:
                        kside = "{:.2f}".format(sidewall_dielectric[7])
                    else:
                        kside = kabove

                    # Describe metal wire
                    ybase = "{:.4f}".format(layer_below[4])
                    kbelow = "{:.2f}".format(layer_below[7])
                    swcx = "{:.4f}".format(wcx)

                    print('* Metal ' + layer[0] + ' wire', file=ofile)

                    if layer[0] == metal:
                        print('C ' + metal + '_left  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                        print('C ' + metal + '_top  ' + kabove + '  0.0  ' + ybase + ' +', file=ofile)
                        print('C ' + metal + '_right  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                        print('C ' + metal + '_bot  ' + kbelow + '  0.0  ' + ybase, file=ofile)
                    else:
                        print('C ' + conductor + '_left  ' + kside + ' ' + swcx + ' ' + ybase + ' +', file=ofile)
                        print('C ' + conductor + '_top  ' + kabove + ' ' + swcx + ' ' + ybase + ' +', file=ofile)
                        print('C ' + conductor + '_right  ' + kside + ' ' + swcx + ' ' + ybase + ' +', file=ofile)
                        print('C ' + conductor + '_bot  ' + kbelow + ' ' + swcx + ' ' + ybase, file=ofile)

            elif layer[1] == 'k' and layer_above[1] == 'k' and (layer[7] != layer_above[7]):
                # Simple dielectric boundary spanning the width of the simulated space

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])
                yvalue = "{:.4f}".format(layer[4])
                yvalref = "{:.4f}".format(layer[4] + 1.0)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)

            elif layer[1] == 'd':
                # Describe ground plane (substrate) conductor.

                kabove = "{:.2f}".format(layer_above[7])
                yvalue = "{:.4f}".format(layer[4])

                print('* ' + layer[0] + ' (reference plane)', file=ofile)
                print('C ' + layer[0] + '_plane ' + kabove + '  0.0  ' + yvalue, file=ofile)

            elif layer[1] == 's':
                # Sidewall dielectric around metal only

                layer_below = pstack[index + 1]
                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                if refmetal == conductor:
                    wcxspec = "{:.4f}".format(wcx)
                    wirey = sbase
                    centy = scy
                else:
                    wcxspec = "{:.4f}".format(0.0)
                    wirey = wbase
                    centy = wcy

                wcyspec = "{:.4f}".format(centy)

                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_sidewall_' + layer[0] + '_left ' + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec, file=ofile)
                print('D k_sidewall_' + layer[0] + '_right ' + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec, file=ofile)

                if layer_below[0] == conductor:
                    wirex1 = shhalfwidth
                    wirex2 = shhalfwidth + layer[6]
                else:
                    wirex1 = halfwidth
                    wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)
                wyspec = "{:.4f}".format(wheight)

                # Add new entries for the conformal dielectric segments
                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_left')
                extra.append('*')
                extra.append('S conform ' + wxn2spec + ' 0.0 ' +  wxn2spec + ' ' + wyspec)
                extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wxn1spec + ' ' + wyspec)
                extra.append('End')

                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_right')
                extra.append('*')
                extra.append('S conform ' + wx2spec + ' 0.0 ' +  wx2spec + ' ' + wyspec)
                extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx1spec + ' ' + wyspec)
                extra.append('End')

            elif layer[1] == 'c':
                # Conformal dielectric

                layer_below = pstack[index + 1]

                # If dheight > 0 then the dielectric exists over the whole
                # plane.

                dheight = layer[4] - layer[3]
                if dheight < 0:
                    dheight = 0

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                if refmetal == conductor:
                    wcxspec = "{:.4f}".format(wcx)
                    wirey = sbase
                    centy = scy
                else:
                    wcxspec = "{:.4f}".format(0.0)
                    wirey = wbase
                    centy = wcy

                if dheight > 0:
                    # Choose reference Y value that is below the metal
                    wcyspec = "{:.4f}".format(wirey - 1.0)
                    wtext = '_wire '
                    dtext = ' -'
                else:
                    wcyspec = "{:.4f}".format(centy)
                    wtext = ' '
                    dtext = ''

                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_conformal_' + layer[0] + wtext + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec + dtext, file=ofile)

                # If layer_below is a sidewall dielectric, then add its
                # width.  If it is a metal, then the value will be zero
                wirex1 = halfwidth + layer_below[6]
                wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)

                if refmetal == conductor:
                   wirey = layer[5] - sbase
                else:
                   wirey = layer[5] - wbase

                wyspec = "{:.4f}".format(wirey)
                dspec = "{:.4f}".format(dheight)

                # Add new entry for the conformal dielectric segments
                extra.append('')
                if dheight > 0:
                    extra.append('File k_conformal_' + layer[0] + '_wire')
                    extra.append('S conform ' + ' 0.0 ' + dspec + ' ' + wxn2spec + ' ' + dspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                    extra.append('S conform ' + wx2spec + ' ' + dspec + ' 40.0 ' + dspec) 
                else:
                    extra.append('File k_conformal_' + layer[0])
                    extra.append('*')
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                extra.append('End')

        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + substrate + '_plane', file=ofile)
        print('0 ground plane', file=ofile)
        print('*', file=ofile)
        print('S ground -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File k_boundary', file=ofile)
        print('0 dielectric boundary', file=ofile)
        print('*', file=ofile)
        print('S plane -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        # Wire geometry
        print('', file=ofile)
        print('File ' + metal + '_left', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide left', file=ofile)
        print('*', file=ofile)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthn + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_top', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide top', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' ' + height + ' ' + hwidthp + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_right', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide right', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthp + ' ' + height + ' ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_bot', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide bottom', file=ofile)
        print('*', file=ofile)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        # Shield geometry
        print('', file=ofile)
        print('File ' + conductor + '_left', file=ofile)
        print('0 ' + conductor + ' ' + sshwidth + 'um wide left', file=ofile)
        print('*', file=ofile)
        hwidthn = "{:.4f}".format(-shhalfwidth)
        height = "{:.4f}".format(sheight)
        print('S ' + conductor + ' ' + hwidthn + ' 0.0 ' + hwidthn + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_top', file=ofile)
        print('0 ' + conductor + ' ' + sshwidth + 'um wide top', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(shhalfwidth)
        hwidthn = "{:.4f}".format(-shhalfwidth)
        height = "{:.4f}".format(sheight)
        print('S ' + conductor + ' ' + hwidthn + ' ' + height + ' ' + hwidthp + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_right', file=ofile)
        print('0 ' + conductor + ' ' + sshwidth + 'um wide right', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(shhalfwidth)
        height = "{:.4f}".format(sheight)
        print('S ' + conductor + ' ' + hwidthp + ' ' + height + ' ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_bot', file=ofile)
        print('0 ' + conductor + ' ' + sshwidth + 'um wide bottom', file=ofile)
        print('*', file=ofile)
        print('S ' + conductor + ' ' + hwidthn + ' 0.0 ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        for line in extra:
            print(line, file=ofile)

# --------------------------------------------------------
# generate_two_wire_file --
#
# Procedure to write a ".lst" file for fastercap for a
# geometry of two wires, both in the same plane (i.e.,
# both of the same metal type). 
#
# This generates a simple geometry file representing the cross-
# section of two wires of a given width and separation.  Units
# are dimensionless in fastercap but assumed to be microns.
# Separation is the distance between the wire centerlines.
#
# Arguments:
# (1) filename of the output file
# (2) name of conductor layer (substrate/well/diffusion)
# (3) metal layer for wires
# (4) width of metal wires
# (5) spacing between metal wires
# (6) process stack generated by ordered_stack()
# --------------------------------------------------------

def generate_two_wire_file(filename, conductor, metal, width, spacing, pstack):

    # Calculate wire half-spacing and half-width
    halfspace = spacing / 2.0
    halfwidth = width / 2.0
    wcx = halfspace

    # Calculate wire base and wire centers---use the latter as reference points
    # for conformal dielectrics.
    wheight = 0
    wbase = 0
    wcy = 0
    for index in range(0, len(pstack) - 1):
        layer = pstack[index]
        if layer[1] == 'm':
            wheight = layer[5] - layer[3]
            wbase = layer[3]
            wcy = wbase + (wheight / 2)
            break

    extra = []

    swidth = "{:.2f}".format(width)
    sspace = "{:.2f}".format(spacing)

    with open(filename, 'w') as ofile:
        print('* 2D - ' + metal + ' to ' + conductor, file=ofile)
        print('* FasterCap input file: ' + filename, file=ofile)
        print('* Instantiates two ' + metal + ' wires of width ' + swidth, file=ofile)
        print('* Wire centers are separated by ' + sspace, file=ofile)
        print('*', file=ofile)
        print('*', file=ofile)

        # Describe the stack.  ordered_stack() generates a stack list of layers
        # from top to bottom.  Ignore the first entry (air) because each layer
        # references the dielectric of the layer above it.

        for index in range(1, len(pstack)):
            layer = pstack[index]
            layer_above = pstack[index - 1]

            refmetal = layer[2]

            if layer[1] == 'm':
                if layer[0] == metal:
                    layer_below = pstack[index + 1]

                    # Add coupling from dielectric below to dielectric above
                    # The dielectric above is either a plain 'k' dielectric
                    # or a conformal dielectric with a non-zero thickness over
                    # the whole area (see dheight, below).
                    dielectric_above = None
                    sidewall_dielectric = None
                    top_dielectric = None
                    for j in range(index - 1, -1, -1):
                        if pstack[j][1] == 's':
                            sidewall_dielectric = pstack[j]
                        if pstack[j][1] == 'k':
                            dielectric_above = pstack[j]
                            break
                        else:
                            if pstack[j][1] == 'c' and pstack[j][4] > pstack[j][3]:
                                dielectric_above = pstack[j]
                            if pstack[j][1] == 'c' and pstack[j][5] > pstack[j][4]:
                                top_dielectric = pstack[j]
                            break
                    if dielectric_above and layer_below[7] != dielectric_above[7]:
                        # Simple dielectric boundary spanning the width of the simulated space

                        kabove = "{:.2f}".format(dielectric_above[7])
                        kvalue = "{:.2f}".format(layer_below[7])
                        yvalue = "{:.4f}".format(layer_below[4])
                        yvalref = "{:.4f}".format(layer_below[4] + 1.0)

                        print('* ' + layer_below[0] + ' to ' + dielectric_above[0], file=ofile)
                        print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)
                    elif top_dielectric:
                        kabove = "{:.2f}".format(top_dielectric[7])
                    else:
                        kabove = "{:.2f}".format(layer_above[7])

                    if sidewall_dielectric:
                        kside = "{:.2f}".format(sidewall_dielectric[7])
                    else:
                        kside = kabove

                    # Describe metal wires
                    hspacep = "{:.4f}".format(halfspace)
                    hspacen = "{:.4f}".format(-halfspace)
                    ybase = "{:.4f}".format(layer_below[4])
                    kbelow = "{:.2f}".format(layer_below[7])

                    print('* Metal ' + metal + ' left', file=ofile)

                    print('C ' + metal + '_left  ' + kside + '  ' + hspacen + '  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_top  ' + kabove + '  ' + hspacen + '  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_right  ' + kside + '  ' + hspacen + '  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_bot  ' + kbelow + '  ' + hspacen + '  ' + ybase, file=ofile)

                    print('* Metal ' + metal + ' right', file=ofile)
                    print('C ' + metal + '_left  ' + kside + '  ' + hspacep + '  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_top  ' + kabove + '  ' + hspacep + '  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_right  ' + kside + '  ' + hspacep + '  ' + ybase + ' +', file=ofile)
                    print('C ' + metal + '_bot  ' + kbelow + '  ' + hspacep + '  ' + ybase, file=ofile)

            elif layer[1] == 'k' and layer_above[1] == 'k' and (layer[7] != layer_above[7]):
                # Simple dielectric boundary spanning the width of the simulated space

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])
                yvalue = "{:.4f}".format(layer[4])
                yvalref = "{:.4f}".format(layer[4] + 1.0)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)

            elif layer[1] == 'd':
                # Describe ground plane conductor.

                kabove = "{:.2f}".format(layer_above[7])
                yvalue = "{:.4f}".format(layer[4])

                print('* ' + layer[0] + ' (reference plane)', file=ofile)
                print('C ' + layer[0] + '_plane ' + kabove + '  0.0  ' + yvalue, file=ofile)

            elif layer[1] == 's':
                # Sidewall dielectric around metal only

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                wcxspec = "{:.4f}".format(wcx)
                wncxspec = "{:.4f}".format(-wcx)
                wcyspec = "{:.4f}".format(wcy)

                wirey = wbase
                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_sidewall_' + layer[0] + '_left ' + kvalue + ' ' + kabove + ' ' + wncxspec + ' ' + wyspec + ' ' + wncxspec + ' ' + wcyspec, file=ofile)
                print('D k_sidewall_' + layer[0] + '_right ' + kvalue + ' ' + kabove + ' ' + wncxspec + ' ' + wyspec + ' ' + wncxspec + ' ' + wcyspec, file=ofile)
                print('D k_sidewall_' + layer[0] + '_left ' + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec, file=ofile)
                print('D k_sidewall_' + layer[0] + '_right ' + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec, file=ofile)

                wirex1 = halfwidth
                wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)
                wyspec = "{:.4f}".format(wheight)

                # Add new entries for the conformal dielectric segments
                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_left')
                extra.append('*')
                extra.append('S conform ' + wxn2spec + ' 0.0 ' +  wxn2spec + ' ' + wyspec)
                extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wxn1spec + ' ' + wyspec)
                extra.append('End')

                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_right')
                extra.append('*')
                extra.append('S conform ' + wx2spec + ' 0.0 ' +  wx2spec + ' ' + wyspec)
                extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx1spec + ' ' + wyspec)
                extra.append('End')

            elif layer[1] == 'c':
                # Conformal dielectric

                layer_below = pstack[index + 1]

                # If dheight > 0 then the dielectric exists over the whole
                # plane.
                dheight = layer[4] - layer[3]
                if dheight < 0:
                    dheight = 0

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                wcxspec = "{:.4f}".format(wcx)
                wncxspec = "{:.4f}".format(-wcx)

                wirey = wbase
                if dheight > 0:
                    # Choose reference Y value that is below the metal
                    wcyspec = "{:.4f}".format(wirey - 1.0)
                    ltext = '_left '
                    rtext = '_right '
                    dtext = ' -'
                else:
                    wcyspec = "{:.4f}".format(wcy)
                    ltext = ' '
                    rtext = ' '
                    dtext = ''

                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_conformal_' + layer[0] + ltext + kvalue + ' ' + kabove + ' ' + wncxspec + ' ' + wyspec + ' ' + wncxspec + ' ' + wcyspec + dtext, file=ofile)
                print('D k_conformal_' + layer[0] + rtext + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec + dtext, file=ofile)

                # If layer_below is a sidewall dielectric, then add its
                # width.  If it is a metal, then the value will be zero
                wirex1 = halfwidth + layer_below[6]
                wirex2 = halfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)

                wirey = layer[5] - wbase
                wyspec = "{:.4f}".format(wirey)
                dspec = "{:.4f}".format(dheight)

                # Add new entry for the conformal dielectric segments
                extra.append('')
                if dheight > 0:

                    # These two layers need to span the range -40 to 0 and 0 to +40
                    # but the values need to be shifted to be centered on the wire
                    # center X position (plus and minus)
                    leftedge = -40 + wcx 
                    leftzero = wcx
                    rightzero = -wcx
                    rightedge = 40 - wcx

                    leftedgespec = "{:.4f}".format(leftedge)
                    leftzerospec = "{:.4f}".format(leftzero)
                    rightzerospec = "{:.4f}".format(rightzero)
                    rightedgespec = "{:.4f}".format(rightedge)

                    extra.append('File k_conformal_' + layer[0] + '_left')
                    extra.append('S conform ' + ' ' + leftedgespec + ' ' + dspec + ' ' + wxn2spec + ' ' + dspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                    extra.append('S conform ' + wx2spec + ' ' + dspec + ' ' + leftzerospec + ' ' + dspec) 
                    extra.append('End')
                    extra.append('')
                    extra.append('File k_conformal_' + layer[0] + '_right')
                    extra.append('S conform ' + ' ' + rightzerospec + ' ' + dspec + ' ' + wxn2spec + ' ' + dspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                    extra.append('S conform ' + wx2spec + ' ' + dspec + ' ' + rightedgespec + ' ' + dspec) 
                else:
                    extra.append('File k_conformal_' + layer[0])
                    extra.append('*')
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                extra.append('End')

        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_plane', file=ofile)
        print('0 ground plane', file=ofile)
        print('*', file=ofile)
        print('S ground -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File k_boundary', file=ofile)
        print('0 dielectric boundary', file=ofile)
        print('*', file=ofile)
        print('S plane -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        # Wire geometry
        print('', file=ofile)
        print('File ' + metal + '_left', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide left', file=ofile)
        print('*', file=ofile)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthn + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_top', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide top', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        hwidthn = "{:.4f}".format(-halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' ' + height + ' ' + hwidthp + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_right', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide right', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(halfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthp + ' ' + height + ' ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_bot', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide bottom', file=ofile)
        print('*', file=ofile)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        for line in extra:
            print(line, file=ofile)

# --------------------------------------------------------
# generate_two_offset_wire_file --
#
# Procedure to write a ".lst" file for fastercap for a
# geometry of two wires in different planes.
#
# This generates a simple geometry file representing the cross-
# section of two wires, each with a given width.  The first
# wire is assumed to be at position X=0, and the second wire
# is separated by the given spacing, measured centerpoint to
# centerpoint.
# Units are dimensionless in fastercap but assumed to be microns.
#
# Arguments:
# (1) filename of the output file
# (2) name of substrate layer (substrate/well/diffusion)
# (3) metal layer for 1st wire
# (4) width of 1st wire
# (5) metal layer of 2nd wire
# (6) width of 2nd wire
# (7) spacing between wire centers
# (8) process stack generated by ordered_2metal_stack()
# --------------------------------------------------------

def generate_two_offset_wire_file(filename, substrate, conductor, cwidth, metal, mwidth, spacing, pstack):

    # Calculate 1st wire half-width.  Wire center X position for this wire will be zero
    mhalfwidth = mwidth / 2.0

    # Calculate 2nd wire half-width
    chalfwidth = cwidth / 2.0

    # Calculate the wire center X position of the 2nd wire
    wcx = spacing + mhalfwidth + chalfwidth

    # Calculate wire bases (Y position)
    wheight = sheight = wcy = 0
    wbase = sbase = scy = 0
    for index in range(0, len(pstack) - 1):
        layer = pstack[index]
        if layer[1] == 'm':
            if layer[0] == metal:
                wheight = layer[4] - layer[3]
                wbase = layer[3]
                wcy = wbase + (wheight / 2)
            elif layer[0] == conductor:
                sheight = layer[4] - layer[3]
                sbase = layer[3]
                scy = sbase + (sheight / 2)

    extra = []

    swidth = "{:.2f}".format(mwidth)
    sspace = "{:.2f}".format(spacing)
    scwidth = "{:.2f}".format(cwidth)

    with open(filename, 'w') as ofile:
        print('* 2D - ' + metal + ' to ' + conductor + ' over ' + substrate, file=ofile)
        print('* FasterCap input file: ' + filename, file=ofile)
        print('* Instantiates a ' + metal + ' wire of width ' + swidth, file=ofile)
        print('* Wire center to shield edge is ' + sspace, file=ofile)
        print('*', file=ofile)
        print('*', file=ofile)

        # Describe the stack.  ordered_2metal_stack() generates a stack list of layers
        # from top to bottom.  Ignore the first entry (air) because each layer
        # references the dielectric of the layer above it.

        for index in range(1, len(pstack)):
            layer = pstack[index]
            layer_above = pstack[index - 1]

            refmetal = layer[2]

            if layer[1] == 'm':
                if layer[0] == metal or layer[0] == conductor:
                    layer_below = pstack[index + 1]

                    # Add coupling from dielectric below to dielectric above
                    # The dielectric above is either a plain 'k' dielectric
                    # or a conformal dielectric with a non-zero thickness over
                    # the whole area (see dheight, below).
                    dielectric_above = None
                    sidewall_dielectric = None
                    top_dielectric = None
                    for j in range(index - 1, -1, -1):
                        if pstack[j][1] == 's':
                            sidewall_dielectric = pstack[j]
                        if pstack[j][1] == 'k':
                            dielectric_above = pstack[j]
                            break
                        else:
                            if pstack[j][1] == 'c' and pstack[j][4] > pstack[j][3]:
                                dielectric_above = pstack[j]
                            if pstack[j][1] == 'c' and pstack[j][5] > pstack[j][4]:
                                top_dielectric = pstack[j]
                            break
                    if dielectric_above and layer_below[7] != dielectric_above[7]:
                        # Simple dielectric boundary spanning the width of the simulated space

                        kabove = "{:.2f}".format(dielectric_above[7])
                        kvalue = "{:.2f}".format(layer_below[7])
                        yvalue = "{:.4f}".format(layer_below[4])
                        yvalref = "{:.4f}".format(layer_below[4] + 1.0)

                        print('* ' + layer_below[0] + ' to ' + dielectric_above[0], file=ofile)
                        print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)
                    elif top_dielectric:
                        kabove = "{:.2f}".format(top_dielectric[7])
                    else:
                        kabove = "{:.2f}".format(layer_above[7])

                    if sidewall_dielectric:
                        kside = "{:.2f}".format(sidewall_dielectric[7])
                    else:
                        kside = kabove

                    # Describe metal wire
                    ybase = "{:.4f}".format(layer_below[4])
                    kbelow = "{:.2f}".format(layer_below[7])
                    swcx = "{:.4f}".format(wcx)

                    print('* Metal ' + layer[0] + ' wire', file=ofile)

                    if layer[0] == metal:
                        print('C ' + metal + '_left  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                        print('C ' + metal + '_top  ' + kabove + '  0.0  ' + ybase + ' +', file=ofile)
                        print('C ' + metal + '_right  ' + kside + '  0.0  ' + ybase + ' +', file=ofile)
                        print('C ' + metal + '_bot  ' + kbelow + '  0.0  ' + ybase, file=ofile)
                    else:
                        print('C ' + conductor + '_left  ' + kside + ' ' + swcx + ' ' + ybase + ' +', file=ofile)
                        print('C ' + conductor + '_top  ' + kabove + ' ' + swcx + ' ' + ybase + ' +', file=ofile)
                        print('C ' + conductor + '_right  ' + kside + ' ' + swcx + ' ' + ybase + ' +', file=ofile)
                        print('C ' + conductor + '_bot  ' + kbelow + ' ' + swcx + ' ' + ybase, file=ofile)

            elif layer[1] == 'k' and layer_above[1] == 'k' and (layer[7] != layer_above[7]):
                # Simple dielectric boundary spanning the width of the simulated space

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])
                yvalue = "{:.4f}".format(layer[4])
                yvalref = "{:.4f}".format(layer[4] + 1.0)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_boundary ' + kvalue + ' ' + kabove + ' 0.0 ' + yvalue + ' 0.0 ' + yvalref + ' -', file=ofile)

            elif layer[1] == 'd':
                # Describe ground plane (substrate) conductor.

                kabove = "{:.2f}".format(layer_above[7])
                yvalue = "{:.4f}".format(layer[4])

                print('* ' + layer[0] + ' (reference plane)', file=ofile)
                print('C ' + layer[0] + '_plane ' + kabove + '  0.0  ' + yvalue, file=ofile)

            elif layer[1] == 's':
                # Sidewall dielectric around metal only

                layer_below = pstack[index + 1]
                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                if refmetal == conductor:
                    wcxspec = "{:.4f}".format(wcx)
                    wirey = sbase
                    centy = scy
                else:
                    wcxspec = "{:.4f}".format(0.0)
                    wirey = wbase
                    centy = wcy

                wcyspec = "{:.4f}".format(centy)

                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_sidewall_' + layer[0] + '_left ' + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec, file=ofile)
                print('D k_sidewall_' + layer[0] + '_right ' + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec, file=ofile)

                if refmetal == conductor:
                    wirex1 = chalfwidth
                    wirex2 = chalfwidth + layer[6]
                else:
                    wirex1 = mhalfwidth
                    wirex2 = mhalfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)
                wyspec = "{:.4f}".format(wheight)

                # Add new entries for the conformal dielectric segments
                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_left')
                extra.append('*')
                extra.append('S conform ' + wxn2spec + ' 0.0 ' +  wxn2spec + ' ' + wyspec)
                extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wxn1spec + ' ' + wyspec)
                extra.append('End')

                extra.append('')
                extra.append('File k_sidewall_' + layer[0] + '_right')
                extra.append('*')
                extra.append('S conform ' + wx2spec + ' 0.0 ' +  wx2spec + ' ' + wyspec)
                extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx1spec + ' ' + wyspec)
                extra.append('End')

            elif layer[1] == 'c':
                # Conformal dielectric

                layer_below = pstack[index + 1]

                # If dheight > 0 then the dielectric exists over the whole
                # plane.
                dheight = layer[4] - layer[3]
                if dheight < 0:
                    dheight = 0

                kabove = "{:.2f}".format(layer_above[7])
                kvalue = "{:.2f}".format(layer[7])

                if refmetal == conductor:
                    wcxspec = "{:.4f}".format(wcx)
                    wirey = sbase
                    centy = scy
                else:
                    wcxspec = "{:.4f}".format(0.0)
                    wirey = wbase
                    centy = wcy

                if dheight > 0:
                    # Choose reference Y value that is below the metal
                    wcyspec = "{:.4f}".format(wirey - 1.0)
                    wtext = '_wire '
                    dtext = ' -'
                else:
                    wcyspec = "{:.4f}".format(centy)
                    wtext = ' '
                    dtext = ''

                wyspec = "{:.4f}".format(wirey)

                print('* ' + layer[0] + ' to ' + layer_above[0], file=ofile)
                print('D k_conformal_' + layer[0] + wtext + kvalue + ' ' + kabove + ' ' + wcxspec + ' ' + wyspec + ' ' + wcxspec + ' ' + wcyspec + dtext, file=ofile)

                # If layer_below is a sidewall dielectric, then add its
                # width.  If it is a metal, then the value will be zero
                if refmetal == conductor:
                    wirex1 = chalfwidth + layer_below[6]
                    wirex2 = chalfwidth + layer[6]
                else:
                    wirex1 = mhalfwidth + layer_below[6]
                    wirex2 = mhalfwidth + layer[6]

                wxn1spec = "{:.4f}".format(-wirex1)
                wxn2spec = "{:.4f}".format(-wirex2)
                wx1spec = "{:.4f}".format(wirex1)
                wx2spec = "{:.4f}".format(wirex2)

                if refmetal == conductor:
                    wirey = layer[5] - sbase
                else:
                    wirey = layer[5] - wbase

                wyspec = "{:.4f}".format(wirey)
                dspec = "{:.4f}".format(dheight)

                # Add new entry for the conformal dielectric segments
                extra.append('')
                if dheight > 0:
                    extra.append('File k_conformal_' + layer[0] + '_wire')
                    extra.append('S conform ' + ' -40.0 ' + dspec + ' ' + wxn2spec + ' ' + dspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                    extra.append('S conform ' + wx2spec + ' ' + dspec + ' 40.0 ' + dspec) 
                else:
                    extra.append('File k_conformal_' + layer[0])
                    extra.append('*')
                    extra.append('S conform ' + wxn2spec + ' ' + dspec + ' ' + wxn2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wxn2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + wyspec) 
                    extra.append('S conform ' + wx2spec + ' ' + wyspec + ' ' + wx2spec + ' ' + dspec) 
                extra.append('End')

        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + substrate + '_plane', file=ofile)
        print('0 ground plane', file=ofile)
        print('*', file=ofile)
        print('S ground -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File k_boundary', file=ofile)
        print('0 dielectric boundary', file=ofile)
        print('*', file=ofile)
        print('S plane -40.0 0.0 40.0 0', file=ofile)
        print('End', file=ofile)

        # Wire geometry
        print('', file=ofile)
        print('File ' + metal + '_left', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide left', file=ofile)
        print('*', file=ofile)
        hwidthn = "{:.4f}".format(-mhalfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthn + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_top', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide top', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(mhalfwidth)
        hwidthn = "{:.4f}".format(-mhalfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthn + ' ' + height + ' ' + hwidthp + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_right', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide right', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(mhalfwidth)
        height = "{:.4f}".format(wheight)
        print('S ' + metal + ' ' + hwidthp + ' ' + height + ' ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + metal + '_bot', file=ofile)
        print('0 ' + metal + ' ' + swidth + 'um wide bottom', file=ofile)
        print('*', file=ofile)
        print('S ' + metal + ' ' + hwidthn + ' 0.0 ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        # Shield geometry
        print('', file=ofile)
        print('File ' + conductor + '_left', file=ofile)
        print('0 ' + conductor + ' ' + scwidth + 'um wide left', file=ofile)
        print('*', file=ofile)
        hwidthn = "{:.4f}".format(-chalfwidth)
        height = "{:.4f}".format(sheight)
        print('S ' + conductor + ' ' + hwidthn + ' 0.0 ' + hwidthn + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_top', file=ofile)
        print('0 ' + conductor + ' ' + scwidth + 'um wide top', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(chalfwidth)
        hwidthn = "{:.4f}".format(-chalfwidth)
        height = "{:.4f}".format(sheight)
        print('S ' + conductor + ' ' + hwidthn + ' ' + height + ' ' + hwidthp + ' ' + height, file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_right', file=ofile)
        print('0 ' + conductor + ' ' + scwidth + 'um wide right', file=ofile)
        print('*', file=ofile)
        hwidthp = "{:.4f}".format(chalfwidth)
        height = "{:.4f}".format(sheight)
        print('S ' + conductor + ' ' + hwidthp + ' ' + height + ' ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        print('File ' + conductor + '_bot', file=ofile)
        print('0 ' + conductor + ' ' + scwidth + 'um wide bottom', file=ofile)
        print('*', file=ofile)
        print('S ' + conductor + ' ' + hwidthn + ' 0.0 ' + hwidthp + ' 0.0', file=ofile)
        print('End', file=ofile)

        print('', file=ofile)
        for line in extra:
            print(line, file=ofile)

